import &StandardImport

class TaskTextEditor extends FluxComponent
  @subscriptions
    :appKitViewState.gridSize
    :task

  @stateFields
    editingText: false

  @propFields :taskId

  updateTask: (mergeInTaskProps) ->
    @models.task.updateTask
      @taskId
      mergeInTaskProps

  valueChanged: ({props:{value}}) ->
    @updateTask
      text: value

  normalizeValue: ->
    @updateTask
      text:
        @task.text.trim()
        .replace /\n\n+/g,  "" \n
        .replace /[ \t]+/g,    ' '

  scrollOnScreen: ->
    @refs?.mainElement?.element?.scrollOnScreen()

  # NOTE - iOS only lets focus setting while in a touch-event
  # https://stackoverflow.com/questions/18728166/programmatically-focus-on-next-input-field-in-mobile-safari
  focusInput: ->
    @refs?.textInput?.element?.focus() # for iOS???
    timeout 10, ->
      @refs?.textInput?.element?.moveCursorToEnd()
      @refs?.textInput?.element?.focus()
    timeout 20, @scrollOnScreen
    timeout 300, @scrollOnScreen

  preprocessState: (state) ->
    if state.task && @props.taskId != :root && !present state.task.text
      @focusInput()
      merge super, editingText: true
    else
      super

  render: ->
    @ extract gridSize
    @props extract tight
    @task extract? text

    commonTextProps =
      switch @props.depth
      when 1 then TextStyles.xxLargeLightText
      # when 2 then TextStyles.xLargeText
      else TextStyles.mediumText
      padding:  gridSize
      color:    TextPalette.black.primary
      maxLines: 3

    Element
      :parentWidthChildrenHeight
      # draw: :red
      key: :mainElement
      on: unless @depth
        pointerClick: ->
          @triggerEditingText()
          @focusInput()

      Element
        :clip
        size: if @editingText then :parentWidthChildrenHeight else 0
        on:
          blur: ->
            unless present text
              @models.task.clearUnusedSubtasks()
            @clearEditingText()
          pointerClick: @focusInput

        :textCursor
        TextInputElement
          commonTextProps
          :parentWidthChildrenHeight
          key:        :textInput
          maxLength:  60
          captureWheelEvents: true
          type:   :textarea
          placeholder:
            if @taskId == :root
              "#1 goal"
            else
              "sub-goal"
          value:  text
          on: {}
            focus:  @triggerEditingText
            blur:   @normalizeValue
            # enter:  @clearEditingText
            @valueChanged

      unless @editingText
        TextElement
          commonTextProps
          :textCursor
          :parentWidthChildrenHeight
          text: text
