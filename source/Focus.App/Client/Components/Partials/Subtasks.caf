import &StandardImport

SubtasksFactory = class Subtasks extends FluxComponent
  @subscriptions
    :appKitViewState.gridSize
    :task

  @propFields :taskId

  @stateFields
    showAllChildren: false
    selectedSubtaskId: null

  @setter
    showAllChildren: (v) ->
      if v
        timeout 250 ->
          @refs.no1Children?.element?.scrollOnScreen()

      @setState :showAllChildren v

  toggleShowAllChildren: (v) ->
    @showAllChildren = !@showAllChildren

  clearShowAllChildren: -> @showAllChildren = null


  @getter
    selectedSubtaskId: ->
      @state extract task, selectedSubtaskId
      if task?.subtasks
        if selectedSubtaskId && !(selectedSubtaskId in task.subtasks)
          selectedSubtaskId = @selectedSubtaskId = null

        selectedSubtaskId ? task.subtasks[0]

  updateTask: (mergeInTaskProps) ->
    @models.task.updateTask
      @taskId
      mergeInTaskProps

  newSubtask: ->
    @models.taskNavState.showSubtask
      @taskId
      @selectedSubtaskId = @models.task.newSubtask @taskId

  selectOrAddTask: (taskId) ->
    if taskId
      if @selectedSubtaskId == taskId
        @toggleShowAllChildren()
      else
        @setSelectedSubtaskId taskId
        @clearShowAllChildren()
    else
      @newSubtask()

  render: ->
    @ extract gridSize, selectedSubtaskId
    @props extract
      order = 1
      path = [1]
    @task extract?
      text
      subtasks

    subtasks ?= []

    buttonSize = gridSize * 2.5

    Element
      :parentWidthChildrenHeight
      :column
      :clip
      key: :mainSubtasksElement
      childrenMargins: gridSize
      animators:
        size: toFrom: h: 0

      if subtasks.length > 0
        []
          Element
            size: h: buttonSize
            Element
              on: pointerClick: @toggleShowAllChildren
              size: buttonSize
              animators: :location :axis
              if @showAllChildren
                :centerLeft
              else
                :centerCenter
              # draw:
                # :circle
                # TextPalette.white.primary
              padding: gridSize * .67
              :pointerCursor
              Element
                :centerCenter
                animators:
                  :angle
                angle:
                  if @showAllChildren
                    -Math.PI / 2
                  else 0
                draw:
                  shape: (context, s) ->
                    {top, left, right, bottom, vCenter, hCenter} = s
                    context.moveTo  hCenter,  bottom * .9
                    context.lineTo  right,    bottom * .25
                    context.lineTo  left,     bottom * .25
                    context.closePath()

                  fill: AppPalette.primary

          Element
            :column
            :parentWidthChildrenHeight
            key: :no1Children
            childrenMargins: 1
            padding: left: if @showAllChildren then gridSize * 2 else 0
            animators:
              :padding
              size: toFrom: h: 0
            :clip

            array order til subtasks.length
              taskId = subtasks[order]
              if @showAllChildren || taskId == selectedSubtaskId
                JustTask {}
                  key:    taskId
                  taskId: taskId
                  depth:
                    if taskId
                      @props.depth + 1
                    else 3
                  order: order + 1
                  count: subtasks.length
                  selected: taskId == selectedSubtaskId
                  select: @selectOrAddTask
                  showOptions: @showAllChildren
                  path: compactFlattenAll
                    path ? 1
                    order + 1

            @showAllChildren && JustTask {}
              depth:  3
              select: @selectOrAddTask
              path: compactFlattenAll
                path ? 1
                1

          if subtaskId = selectedSubtaskId
            order = 1 + subtasks.indexOf subtaskId
            SubtasksFactory
              key:    "" subtasks #{subtaskId}
              depth:  @props.depth + 1
              taskId: subtaskId
              path:   compactFlattenAll
                path ? order
                order

      else
        JustTask {}
          depth:  3
          select: @selectOrAddTask
          path: compactFlattenAll
            path ? 1
            1
